(provide 'import.scm)
(define fetch (eval-js 'fetch))
(define (read-remote path)
  (with-input-from-string ((js-ref-method (await-js (fetch path)) 'text)) read)
  )
(define-macro (load-remote path . c)
  `(eval `(begin ,(read-remote ,path)) . ,c)
  )
(define-macro (require file . c)
  `(unless (provided? ',file)
     (load-remote ',file . ,c))
  )
(define (import path . things)
  (if (null? things)
      (apply varlet (curlet)
             (with-let (unlet)
                       (let ()
                         (load-remote path (curlet))
                         (map (lambda (binding)
	                        (cons (symbol path ":" (symbol->string (car binding)))
		                      (cdr binding)))
	                      (curlet)))))
      ()
  )

  
(unless (provided? 'await.scm);bootstrap await.scm because await is needed to do nice requires
  (write "using fallback require for await.scm . determinisim hasn't been tested here!")
  ((eval-js "(ev)=>fetch('await.scm').then((r)=>(ev('(begin\\n'+r.text()+'\\n)')))") eval-string)
  )
